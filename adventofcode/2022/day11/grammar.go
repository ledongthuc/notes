package main

// Code generated by peg -switch -inline -strict -output grammar.go grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulemonkeys
	rulemonkey
	rulemonkey_identifier
	ruledelimiter
	ruledelimiters
	ruleitems
	rulestarting_items
	ruleoperation_op
	ruleoperand
	ruleoperation_expression
	ruleoperation
	ruledivisible
	ruletest_true_case
	ruletest_false_case
	ruletest_cases
	ruledigit
	ruledigits
)

var rul3s = [...]string{
	"Unknown",
	"monkeys",
	"monkey",
	"monkey_identifier",
	"delimiter",
	"delimiters",
	"items",
	"starting_items",
	"operation_op",
	"operand",
	"operation_expression",
	"operation",
	"divisible",
	"test_true_case",
	"test_false_case",
	"test_cases",
	"digit",
	"digits",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type MonkeysParser struct {
	Buffer string
	buffer []rune
	rules  [18]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *MonkeysParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *MonkeysParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *MonkeysParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *MonkeysParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *MonkeysParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *MonkeysParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*MonkeysParser) error {
	return func(p *MonkeysParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*MonkeysParser) error {
	return func(p *MonkeysParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *MonkeysParser) Init(options ...func(*MonkeysParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 monkeys <- <(monkey (delimiters monkey)*)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulemonkey]() {
					goto l0
				}
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					if !_rules[ruledelimiters]() {
						goto l3
					}
					if !_rules[rulemonkey]() {
						goto l3
					}
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				add(rulemonkeys, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 monkey <- <(monkey_identifier delimiters starting_items delimiters operation delimiter test_cases)> */
		func() bool {
			position4, tokenIndex4 := position, tokenIndex
			{
				position5 := position
				{
					position6 := position
					{
						position7, tokenIndex7 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l8
						}
						position++
						goto l7
					l8:
						position, tokenIndex = position7, tokenIndex7
						if buffer[position] != rune('M') {
							goto l4
						}
						position++
					}
				l7:
					{
						position9, tokenIndex9 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l10
						}
						position++
						goto l9
					l10:
						position, tokenIndex = position9, tokenIndex9
						if buffer[position] != rune('O') {
							goto l4
						}
						position++
					}
				l9:
					{
						position11, tokenIndex11 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l12
						}
						position++
						goto l11
					l12:
						position, tokenIndex = position11, tokenIndex11
						if buffer[position] != rune('N') {
							goto l4
						}
						position++
					}
				l11:
					{
						position13, tokenIndex13 := position, tokenIndex
						if buffer[position] != rune('k') {
							goto l14
						}
						position++
						goto l13
					l14:
						position, tokenIndex = position13, tokenIndex13
						if buffer[position] != rune('K') {
							goto l4
						}
						position++
					}
				l13:
					{
						position15, tokenIndex15 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l16
						}
						position++
						goto l15
					l16:
						position, tokenIndex = position15, tokenIndex15
						if buffer[position] != rune('E') {
							goto l4
						}
						position++
					}
				l15:
					{
						position17, tokenIndex17 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l18
						}
						position++
						goto l17
					l18:
						position, tokenIndex = position17, tokenIndex17
						if buffer[position] != rune('Y') {
							goto l4
						}
						position++
					}
				l17:
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					if !_rules[ruledigits]() {
						goto l4
					}
					if buffer[position] != rune(':') {
						goto l4
					}
					position++
					add(rulemonkey_identifier, position6)
				}
				if !_rules[ruledelimiters]() {
					goto l4
				}
				{
					position19 := position
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position20, tokenIndex20 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l21
						}
						position++
						goto l20
					l21:
						position, tokenIndex = position20, tokenIndex20
						if buffer[position] != rune('S') {
							goto l4
						}
						position++
					}
				l20:
					{
						position22, tokenIndex22 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l23
						}
						position++
						goto l22
					l23:
						position, tokenIndex = position22, tokenIndex22
						if buffer[position] != rune('T') {
							goto l4
						}
						position++
					}
				l22:
					{
						position24, tokenIndex24 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l25
						}
						position++
						goto l24
					l25:
						position, tokenIndex = position24, tokenIndex24
						if buffer[position] != rune('A') {
							goto l4
						}
						position++
					}
				l24:
					{
						position26, tokenIndex26 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l27
						}
						position++
						goto l26
					l27:
						position, tokenIndex = position26, tokenIndex26
						if buffer[position] != rune('R') {
							goto l4
						}
						position++
					}
				l26:
					{
						position28, tokenIndex28 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l29
						}
						position++
						goto l28
					l29:
						position, tokenIndex = position28, tokenIndex28
						if buffer[position] != rune('T') {
							goto l4
						}
						position++
					}
				l28:
					{
						position30, tokenIndex30 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l31
						}
						position++
						goto l30
					l31:
						position, tokenIndex = position30, tokenIndex30
						if buffer[position] != rune('I') {
							goto l4
						}
						position++
					}
				l30:
					{
						position32, tokenIndex32 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l33
						}
						position++
						goto l32
					l33:
						position, tokenIndex = position32, tokenIndex32
						if buffer[position] != rune('N') {
							goto l4
						}
						position++
					}
				l32:
					{
						position34, tokenIndex34 := position, tokenIndex
						if buffer[position] != rune('g') {
							goto l35
						}
						position++
						goto l34
					l35:
						position, tokenIndex = position34, tokenIndex34
						if buffer[position] != rune('G') {
							goto l4
						}
						position++
					}
				l34:
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position36, tokenIndex36 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l37
						}
						position++
						goto l36
					l37:
						position, tokenIndex = position36, tokenIndex36
						if buffer[position] != rune('I') {
							goto l4
						}
						position++
					}
				l36:
					{
						position38, tokenIndex38 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l39
						}
						position++
						goto l38
					l39:
						position, tokenIndex = position38, tokenIndex38
						if buffer[position] != rune('T') {
							goto l4
						}
						position++
					}
				l38:
					{
						position40, tokenIndex40 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position40, tokenIndex40
						if buffer[position] != rune('E') {
							goto l4
						}
						position++
					}
				l40:
					{
						position42, tokenIndex42 := position, tokenIndex
						if buffer[position] != rune('m') {
							goto l43
						}
						position++
						goto l42
					l43:
						position, tokenIndex = position42, tokenIndex42
						if buffer[position] != rune('M') {
							goto l4
						}
						position++
					}
				l42:
					{
						position44, tokenIndex44 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l45
						}
						position++
						goto l44
					l45:
						position, tokenIndex = position44, tokenIndex44
						if buffer[position] != rune('S') {
							goto l4
						}
						position++
					}
				l44:
					if buffer[position] != rune(':') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position46 := position
						if !_rules[ruledigits]() {
							goto l4
						}
					l47:
						{
							position48, tokenIndex48 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l48
							}
							position++
							if buffer[position] != rune(' ') {
								goto l48
							}
							position++
							if !_rules[ruledigits]() {
								goto l48
							}
							goto l47
						l48:
							position, tokenIndex = position48, tokenIndex48
						}
						add(ruleitems, position46)
					}
					add(rulestarting_items, position19)
				}
				if !_rules[ruledelimiters]() {
					goto l4
				}
				{
					position49 := position
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position50, tokenIndex50 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l51
						}
						position++
						goto l50
					l51:
						position, tokenIndex = position50, tokenIndex50
						if buffer[position] != rune('O') {
							goto l4
						}
						position++
					}
				l50:
					{
						position52, tokenIndex52 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l53
						}
						position++
						goto l52
					l53:
						position, tokenIndex = position52, tokenIndex52
						if buffer[position] != rune('P') {
							goto l4
						}
						position++
					}
				l52:
					{
						position54, tokenIndex54 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l55
						}
						position++
						goto l54
					l55:
						position, tokenIndex = position54, tokenIndex54
						if buffer[position] != rune('E') {
							goto l4
						}
						position++
					}
				l54:
					{
						position56, tokenIndex56 := position, tokenIndex
						if buffer[position] != rune('r') {
							goto l57
						}
						position++
						goto l56
					l57:
						position, tokenIndex = position56, tokenIndex56
						if buffer[position] != rune('R') {
							goto l4
						}
						position++
					}
				l56:
					{
						position58, tokenIndex58 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l59
						}
						position++
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if buffer[position] != rune('A') {
							goto l4
						}
						position++
					}
				l58:
					{
						position60, tokenIndex60 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l61
						}
						position++
						goto l60
					l61:
						position, tokenIndex = position60, tokenIndex60
						if buffer[position] != rune('T') {
							goto l4
						}
						position++
					}
				l60:
					{
						position62, tokenIndex62 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l63
						}
						position++
						goto l62
					l63:
						position, tokenIndex = position62, tokenIndex62
						if buffer[position] != rune('I') {
							goto l4
						}
						position++
					}
				l62:
					{
						position64, tokenIndex64 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l65
						}
						position++
						goto l64
					l65:
						position, tokenIndex = position64, tokenIndex64
						if buffer[position] != rune('O') {
							goto l4
						}
						position++
					}
				l64:
					{
						position66, tokenIndex66 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l67
						}
						position++
						goto l66
					l67:
						position, tokenIndex = position66, tokenIndex66
						if buffer[position] != rune('N') {
							goto l4
						}
						position++
					}
				l66:
					if buffer[position] != rune(':') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position68, tokenIndex68 := position, tokenIndex
						if buffer[position] != rune('n') {
							goto l69
						}
						position++
						goto l68
					l69:
						position, tokenIndex = position68, tokenIndex68
						if buffer[position] != rune('N') {
							goto l4
						}
						position++
					}
				l68:
					{
						position70, tokenIndex70 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l71
						}
						position++
						goto l70
					l71:
						position, tokenIndex = position70, tokenIndex70
						if buffer[position] != rune('E') {
							goto l4
						}
						position++
					}
				l70:
					{
						position72, tokenIndex72 := position, tokenIndex
						if buffer[position] != rune('w') {
							goto l73
						}
						position++
						goto l72
					l73:
						position, tokenIndex = position72, tokenIndex72
						if buffer[position] != rune('W') {
							goto l4
						}
						position++
					}
				l72:
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					if buffer[position] != rune('=') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position74 := position
						if !_rules[ruleoperand]() {
							goto l4
						}
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position75 := position
							{
								position76, tokenIndex76 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l77
								}
								position++
								goto l76
							l77:
								position, tokenIndex = position76, tokenIndex76
								if buffer[position] != rune('+') {
									goto l4
								}
								position++
							}
						l76:
							add(ruleoperation_op, position75)
						}
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if !_rules[ruleoperand]() {
							goto l4
						}
						add(ruleoperation_expression, position74)
					}
					add(ruleoperation, position49)
				}
				if !_rules[ruledelimiter]() {
					goto l4
				}
				{
					position78 := position
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position79, tokenIndex79 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l80
						}
						position++
						goto l79
					l80:
						position, tokenIndex = position79, tokenIndex79
						if buffer[position] != rune('T') {
							goto l4
						}
						position++
					}
				l79:
					{
						position81, tokenIndex81 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l82
						}
						position++
						goto l81
					l82:
						position, tokenIndex = position81, tokenIndex81
						if buffer[position] != rune('E') {
							goto l4
						}
						position++
					}
				l81:
					{
						position83, tokenIndex83 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l84
						}
						position++
						goto l83
					l84:
						position, tokenIndex = position83, tokenIndex83
						if buffer[position] != rune('S') {
							goto l4
						}
						position++
					}
				l83:
					{
						position85, tokenIndex85 := position, tokenIndex
						if buffer[position] != rune('t') {
							goto l86
						}
						position++
						goto l85
					l86:
						position, tokenIndex = position85, tokenIndex85
						if buffer[position] != rune('T') {
							goto l4
						}
						position++
					}
				l85:
					if buffer[position] != rune(':') {
						goto l4
					}
					position++
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position87, tokenIndex87 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l88
						}
						position++
						goto l87
					l88:
						position, tokenIndex = position87, tokenIndex87
						if buffer[position] != rune('D') {
							goto l4
						}
						position++
					}
				l87:
					{
						position89, tokenIndex89 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l90
						}
						position++
						goto l89
					l90:
						position, tokenIndex = position89, tokenIndex89
						if buffer[position] != rune('I') {
							goto l4
						}
						position++
					}
				l89:
					{
						position91, tokenIndex91 := position, tokenIndex
						if buffer[position] != rune('v') {
							goto l92
						}
						position++
						goto l91
					l92:
						position, tokenIndex = position91, tokenIndex91
						if buffer[position] != rune('V') {
							goto l4
						}
						position++
					}
				l91:
					{
						position93, tokenIndex93 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l94
						}
						position++
						goto l93
					l94:
						position, tokenIndex = position93, tokenIndex93
						if buffer[position] != rune('I') {
							goto l4
						}
						position++
					}
				l93:
					{
						position95, tokenIndex95 := position, tokenIndex
						if buffer[position] != rune('s') {
							goto l96
						}
						position++
						goto l95
					l96:
						position, tokenIndex = position95, tokenIndex95
						if buffer[position] != rune('S') {
							goto l4
						}
						position++
					}
				l95:
					{
						position97, tokenIndex97 := position, tokenIndex
						if buffer[position] != rune('i') {
							goto l98
						}
						position++
						goto l97
					l98:
						position, tokenIndex = position97, tokenIndex97
						if buffer[position] != rune('I') {
							goto l4
						}
						position++
					}
				l97:
					{
						position99, tokenIndex99 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l100
						}
						position++
						goto l99
					l100:
						position, tokenIndex = position99, tokenIndex99
						if buffer[position] != rune('B') {
							goto l4
						}
						position++
					}
				l99:
					{
						position101, tokenIndex101 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l102
						}
						position++
						goto l101
					l102:
						position, tokenIndex = position101, tokenIndex101
						if buffer[position] != rune('L') {
							goto l4
						}
						position++
					}
				l101:
					{
						position103, tokenIndex103 := position, tokenIndex
						if buffer[position] != rune('e') {
							goto l104
						}
						position++
						goto l103
					l104:
						position, tokenIndex = position103, tokenIndex103
						if buffer[position] != rune('E') {
							goto l4
						}
						position++
					}
				l103:
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position105, tokenIndex105 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l106
						}
						position++
						goto l105
					l106:
						position, tokenIndex = position105, tokenIndex105
						if buffer[position] != rune('B') {
							goto l4
						}
						position++
					}
				l105:
					{
						position107, tokenIndex107 := position, tokenIndex
						if buffer[position] != rune('y') {
							goto l108
						}
						position++
						goto l107
					l108:
						position, tokenIndex = position107, tokenIndex107
						if buffer[position] != rune('Y') {
							goto l4
						}
						position++
					}
				l107:
					if buffer[position] != rune(' ') {
						goto l4
					}
					position++
					{
						position109 := position
						if !_rules[ruledigits]() {
							goto l4
						}
						add(ruledivisible, position109)
					}
					if !_rules[ruledelimiter]() {
						goto l4
					}
					{
						position110 := position
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position111, tokenIndex111 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l112
							}
							position++
							goto l111
						l112:
							position, tokenIndex = position111, tokenIndex111
							if buffer[position] != rune('I') {
								goto l4
							}
							position++
						}
					l111:
						{
							position113, tokenIndex113 := position, tokenIndex
							if buffer[position] != rune('f') {
								goto l114
							}
							position++
							goto l113
						l114:
							position, tokenIndex = position113, tokenIndex113
							if buffer[position] != rune('F') {
								goto l4
							}
							position++
						}
					l113:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position115, tokenIndex115 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l116
							}
							position++
							goto l115
						l116:
							position, tokenIndex = position115, tokenIndex115
							if buffer[position] != rune('T') {
								goto l4
							}
							position++
						}
					l115:
						{
							position117, tokenIndex117 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l118
							}
							position++
							goto l117
						l118:
							position, tokenIndex = position117, tokenIndex117
							if buffer[position] != rune('R') {
								goto l4
							}
							position++
						}
					l117:
						{
							position119, tokenIndex119 := position, tokenIndex
							if buffer[position] != rune('u') {
								goto l120
							}
							position++
							goto l119
						l120:
							position, tokenIndex = position119, tokenIndex119
							if buffer[position] != rune('U') {
								goto l4
							}
							position++
						}
					l119:
						{
							position121, tokenIndex121 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l122
							}
							position++
							goto l121
						l122:
							position, tokenIndex = position121, tokenIndex121
							if buffer[position] != rune('E') {
								goto l4
							}
							position++
						}
					l121:
						if buffer[position] != rune(':') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position123, tokenIndex123 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l124
							}
							position++
							goto l123
						l124:
							position, tokenIndex = position123, tokenIndex123
							if buffer[position] != rune('T') {
								goto l4
							}
							position++
						}
					l123:
						{
							position125, tokenIndex125 := position, tokenIndex
							if buffer[position] != rune('h') {
								goto l126
							}
							position++
							goto l125
						l126:
							position, tokenIndex = position125, tokenIndex125
							if buffer[position] != rune('H') {
								goto l4
							}
							position++
						}
					l125:
						{
							position127, tokenIndex127 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l128
							}
							position++
							goto l127
						l128:
							position, tokenIndex = position127, tokenIndex127
							if buffer[position] != rune('R') {
								goto l4
							}
							position++
						}
					l127:
						{
							position129, tokenIndex129 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l130
							}
							position++
							goto l129
						l130:
							position, tokenIndex = position129, tokenIndex129
							if buffer[position] != rune('O') {
								goto l4
							}
							position++
						}
					l129:
						{
							position131, tokenIndex131 := position, tokenIndex
							if buffer[position] != rune('w') {
								goto l132
							}
							position++
							goto l131
						l132:
							position, tokenIndex = position131, tokenIndex131
							if buffer[position] != rune('W') {
								goto l4
							}
							position++
						}
					l131:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position133, tokenIndex133 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l134
							}
							position++
							goto l133
						l134:
							position, tokenIndex = position133, tokenIndex133
							if buffer[position] != rune('T') {
								goto l4
							}
							position++
						}
					l133:
						{
							position135, tokenIndex135 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l136
							}
							position++
							goto l135
						l136:
							position, tokenIndex = position135, tokenIndex135
							if buffer[position] != rune('O') {
								goto l4
							}
							position++
						}
					l135:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position137, tokenIndex137 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l138
							}
							position++
							goto l137
						l138:
							position, tokenIndex = position137, tokenIndex137
							if buffer[position] != rune('M') {
								goto l4
							}
							position++
						}
					l137:
						{
							position139, tokenIndex139 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l140
							}
							position++
							goto l139
						l140:
							position, tokenIndex = position139, tokenIndex139
							if buffer[position] != rune('O') {
								goto l4
							}
							position++
						}
					l139:
						{
							position141, tokenIndex141 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l142
							}
							position++
							goto l141
						l142:
							position, tokenIndex = position141, tokenIndex141
							if buffer[position] != rune('N') {
								goto l4
							}
							position++
						}
					l141:
						{
							position143, tokenIndex143 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l144
							}
							position++
							goto l143
						l144:
							position, tokenIndex = position143, tokenIndex143
							if buffer[position] != rune('K') {
								goto l4
							}
							position++
						}
					l143:
						{
							position145, tokenIndex145 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l146
							}
							position++
							goto l145
						l146:
							position, tokenIndex = position145, tokenIndex145
							if buffer[position] != rune('E') {
								goto l4
							}
							position++
						}
					l145:
						{
							position147, tokenIndex147 := position, tokenIndex
							if buffer[position] != rune('y') {
								goto l148
							}
							position++
							goto l147
						l148:
							position, tokenIndex = position147, tokenIndex147
							if buffer[position] != rune('Y') {
								goto l4
							}
							position++
						}
					l147:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if !_rules[ruledigit]() {
							goto l4
						}
						add(ruletest_true_case, position110)
					}
					if !_rules[ruledelimiter]() {
						goto l4
					}
					{
						position149 := position
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position150, tokenIndex150 := position, tokenIndex
							if buffer[position] != rune('i') {
								goto l151
							}
							position++
							goto l150
						l151:
							position, tokenIndex = position150, tokenIndex150
							if buffer[position] != rune('I') {
								goto l4
							}
							position++
						}
					l150:
						{
							position152, tokenIndex152 := position, tokenIndex
							if buffer[position] != rune('f') {
								goto l153
							}
							position++
							goto l152
						l153:
							position, tokenIndex = position152, tokenIndex152
							if buffer[position] != rune('F') {
								goto l4
							}
							position++
						}
					l152:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position154, tokenIndex154 := position, tokenIndex
							if buffer[position] != rune('f') {
								goto l155
							}
							position++
							goto l154
						l155:
							position, tokenIndex = position154, tokenIndex154
							if buffer[position] != rune('F') {
								goto l4
							}
							position++
						}
					l154:
						{
							position156, tokenIndex156 := position, tokenIndex
							if buffer[position] != rune('a') {
								goto l157
							}
							position++
							goto l156
						l157:
							position, tokenIndex = position156, tokenIndex156
							if buffer[position] != rune('A') {
								goto l4
							}
							position++
						}
					l156:
						{
							position158, tokenIndex158 := position, tokenIndex
							if buffer[position] != rune('l') {
								goto l159
							}
							position++
							goto l158
						l159:
							position, tokenIndex = position158, tokenIndex158
							if buffer[position] != rune('L') {
								goto l4
							}
							position++
						}
					l158:
						{
							position160, tokenIndex160 := position, tokenIndex
							if buffer[position] != rune('s') {
								goto l161
							}
							position++
							goto l160
						l161:
							position, tokenIndex = position160, tokenIndex160
							if buffer[position] != rune('S') {
								goto l4
							}
							position++
						}
					l160:
						{
							position162, tokenIndex162 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l163
							}
							position++
							goto l162
						l163:
							position, tokenIndex = position162, tokenIndex162
							if buffer[position] != rune('E') {
								goto l4
							}
							position++
						}
					l162:
						if buffer[position] != rune(':') {
							goto l4
						}
						position++
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position164, tokenIndex164 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l165
							}
							position++
							goto l164
						l165:
							position, tokenIndex = position164, tokenIndex164
							if buffer[position] != rune('T') {
								goto l4
							}
							position++
						}
					l164:
						{
							position166, tokenIndex166 := position, tokenIndex
							if buffer[position] != rune('h') {
								goto l167
							}
							position++
							goto l166
						l167:
							position, tokenIndex = position166, tokenIndex166
							if buffer[position] != rune('H') {
								goto l4
							}
							position++
						}
					l166:
						{
							position168, tokenIndex168 := position, tokenIndex
							if buffer[position] != rune('r') {
								goto l169
							}
							position++
							goto l168
						l169:
							position, tokenIndex = position168, tokenIndex168
							if buffer[position] != rune('R') {
								goto l4
							}
							position++
						}
					l168:
						{
							position170, tokenIndex170 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l171
							}
							position++
							goto l170
						l171:
							position, tokenIndex = position170, tokenIndex170
							if buffer[position] != rune('O') {
								goto l4
							}
							position++
						}
					l170:
						{
							position172, tokenIndex172 := position, tokenIndex
							if buffer[position] != rune('w') {
								goto l173
							}
							position++
							goto l172
						l173:
							position, tokenIndex = position172, tokenIndex172
							if buffer[position] != rune('W') {
								goto l4
							}
							position++
						}
					l172:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position174, tokenIndex174 := position, tokenIndex
							if buffer[position] != rune('t') {
								goto l175
							}
							position++
							goto l174
						l175:
							position, tokenIndex = position174, tokenIndex174
							if buffer[position] != rune('T') {
								goto l4
							}
							position++
						}
					l174:
						{
							position176, tokenIndex176 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l177
							}
							position++
							goto l176
						l177:
							position, tokenIndex = position176, tokenIndex176
							if buffer[position] != rune('O') {
								goto l4
							}
							position++
						}
					l176:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						{
							position178, tokenIndex178 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l179
							}
							position++
							goto l178
						l179:
							position, tokenIndex = position178, tokenIndex178
							if buffer[position] != rune('M') {
								goto l4
							}
							position++
						}
					l178:
						{
							position180, tokenIndex180 := position, tokenIndex
							if buffer[position] != rune('o') {
								goto l181
							}
							position++
							goto l180
						l181:
							position, tokenIndex = position180, tokenIndex180
							if buffer[position] != rune('O') {
								goto l4
							}
							position++
						}
					l180:
						{
							position182, tokenIndex182 := position, tokenIndex
							if buffer[position] != rune('n') {
								goto l183
							}
							position++
							goto l182
						l183:
							position, tokenIndex = position182, tokenIndex182
							if buffer[position] != rune('N') {
								goto l4
							}
							position++
						}
					l182:
						{
							position184, tokenIndex184 := position, tokenIndex
							if buffer[position] != rune('k') {
								goto l185
							}
							position++
							goto l184
						l185:
							position, tokenIndex = position184, tokenIndex184
							if buffer[position] != rune('K') {
								goto l4
							}
							position++
						}
					l184:
						{
							position186, tokenIndex186 := position, tokenIndex
							if buffer[position] != rune('e') {
								goto l187
							}
							position++
							goto l186
						l187:
							position, tokenIndex = position186, tokenIndex186
							if buffer[position] != rune('E') {
								goto l4
							}
							position++
						}
					l186:
						{
							position188, tokenIndex188 := position, tokenIndex
							if buffer[position] != rune('y') {
								goto l189
							}
							position++
							goto l188
						l189:
							position, tokenIndex = position188, tokenIndex188
							if buffer[position] != rune('Y') {
								goto l4
							}
							position++
						}
					l188:
						if buffer[position] != rune(' ') {
							goto l4
						}
						position++
						if !_rules[ruledigit]() {
							goto l4
						}
						add(ruletest_false_case, position149)
					}
					add(ruletest_cases, position78)
				}
				add(rulemonkey, position5)
			}
			return true
		l4:
			position, tokenIndex = position4, tokenIndex4
			return false
		},
		/* 2 monkey_identifier <- <(('m' / 'M') ('o' / 'O') ('n' / 'N') ('k' / 'K') ('e' / 'E') ('y' / 'Y') ' ' digits ':')> */
		nil,
		/* 3 delimiter <- <'\n'+> */
		func() bool {
			position191, tokenIndex191 := position, tokenIndex
			{
				position192 := position
				if buffer[position] != rune('\n') {
					goto l191
				}
				position++
			l193:
				{
					position194, tokenIndex194 := position, tokenIndex
					if buffer[position] != rune('\n') {
						goto l194
					}
					position++
					goto l193
				l194:
					position, tokenIndex = position194, tokenIndex194
				}
				add(ruledelimiter, position192)
			}
			return true
		l191:
			position, tokenIndex = position191, tokenIndex191
			return false
		},
		/* 4 delimiters <- <delimiter+> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				if !_rules[ruledelimiter]() {
					goto l195
				}
			l197:
				{
					position198, tokenIndex198 := position, tokenIndex
					if !_rules[ruledelimiter]() {
						goto l198
					}
					goto l197
				l198:
					position, tokenIndex = position198, tokenIndex198
				}
				add(ruledelimiters, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 5 items <- <(digits (',' ' ' digits)*)> */
		nil,
		/* 6 starting_items <- <(' ' ' ' ('s' / 'S') ('t' / 'T') ('a' / 'A') ('r' / 'R') ('t' / 'T') ('i' / 'I') ('n' / 'N') ('g' / 'G') ' ' ('i' / 'I') ('t' / 'T') ('e' / 'E') ('m' / 'M') ('s' / 'S') ':' ' ' items)> */
		nil,
		/* 7 operation_op <- <('*' / '+')> */
		nil,
		/* 8 operand <- <(digits / (('o' / 'O') ('l' / 'L') ('d' / 'D')))> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				{
					position204, tokenIndex204 := position, tokenIndex
					if !_rules[ruledigits]() {
						goto l205
					}
					goto l204
				l205:
					position, tokenIndex = position204, tokenIndex204
					{
						position206, tokenIndex206 := position, tokenIndex
						if buffer[position] != rune('o') {
							goto l207
						}
						position++
						goto l206
					l207:
						position, tokenIndex = position206, tokenIndex206
						if buffer[position] != rune('O') {
							goto l202
						}
						position++
					}
				l206:
					{
						position208, tokenIndex208 := position, tokenIndex
						if buffer[position] != rune('l') {
							goto l209
						}
						position++
						goto l208
					l209:
						position, tokenIndex = position208, tokenIndex208
						if buffer[position] != rune('L') {
							goto l202
						}
						position++
					}
				l208:
					{
						position210, tokenIndex210 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l211
						}
						position++
						goto l210
					l211:
						position, tokenIndex = position210, tokenIndex210
						if buffer[position] != rune('D') {
							goto l202
						}
						position++
					}
				l210:
				}
			l204:
				add(ruleoperand, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 9 operation_expression <- <(operand ' ' operation_op ' ' operand)> */
		nil,
		/* 10 operation <- <(' ' ' ' ('o' / 'O') ('p' / 'P') ('e' / 'E') ('r' / 'R') ('a' / 'A') ('t' / 'T') ('i' / 'I') ('o' / 'O') ('n' / 'N') ':' ' ' ('n' / 'N') ('e' / 'E') ('w' / 'W') ' ' '=' ' ' operation_expression)> */
		nil,
		/* 11 divisible <- <digits> */
		nil,
		/* 12 test_true_case <- <(' ' ' ' ' ' ' ' ('i' / 'I') ('f' / 'F') ' ' ('t' / 'T') ('r' / 'R') ('u' / 'U') ('e' / 'E') ':' ' ' ('t' / 'T') ('h' / 'H') ('r' / 'R') ('o' / 'O') ('w' / 'W') ' ' ('t' / 'T') ('o' / 'O') ' ' ('m' / 'M') ('o' / 'O') ('n' / 'N') ('k' / 'K') ('e' / 'E') ('y' / 'Y') ' ' digit)> */
		nil,
		/* 13 test_false_case <- <(' ' ' ' ' ' ' ' ('i' / 'I') ('f' / 'F') ' ' ('f' / 'F') ('a' / 'A') ('l' / 'L') ('s' / 'S') ('e' / 'E') ':' ' ' ('t' / 'T') ('h' / 'H') ('r' / 'R') ('o' / 'O') ('w' / 'W') ' ' ('t' / 'T') ('o' / 'O') ' ' ('m' / 'M') ('o' / 'O') ('n' / 'N') ('k' / 'K') ('e' / 'E') ('y' / 'Y') ' ' digit)> */
		nil,
		/* 14 test_cases <- <(' ' ' ' ('t' / 'T') ('e' / 'E') ('s' / 'S') ('t' / 'T') ':' ' ' ('d' / 'D') ('i' / 'I') ('v' / 'V') ('i' / 'I') ('s' / 'S') ('i' / 'I') ('b' / 'B') ('l' / 'L') ('e' / 'E') ' ' ('b' / 'B') ('y' / 'Y') ' ' divisible delimiter test_true_case delimiter test_false_case)> */
		nil,
		/* 15 digit <- <[0-9]> */
		func() bool {
			position218, tokenIndex218 := position, tokenIndex
			{
				position219 := position
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l218
				}
				position++
				add(ruledigit, position219)
			}
			return true
		l218:
			position, tokenIndex = position218, tokenIndex218
			return false
		},
		/* 16 digits <- <digit+> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				if !_rules[ruledigit]() {
					goto l220
				}
			l222:
				{
					position223, tokenIndex223 := position, tokenIndex
					if !_rules[ruledigit]() {
						goto l223
					}
					goto l222
				l223:
					position, tokenIndex = position223, tokenIndex223
				}
				add(ruledigits, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
	}
	p.rules = _rules
	return nil
}
